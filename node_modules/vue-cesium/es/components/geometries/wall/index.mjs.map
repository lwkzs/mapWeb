{"version":3,"file":"index.mjs","sources":["../../../../../../packages/components/geometries/wall/index.ts"],"sourcesContent":["/*\n * @Author: zouyaoji@https://github.com/zouyaoji\n * @Date: 2021-09-16 09:28:13\n * @LastEditTime: 2022-03-30 13:24:28\n * @LastEditors: zouyaoji\n * @Description:\n * @FilePath: \\vue-cesium@next\\packages\\components\\geometries\\wall\\index.ts\n */\nimport { VcCartesian3Array, VcComponentInternalInstance, VcComponentPublicInstance, VcReadyObject } from '@vue-cesium/utils/types'\nimport { defineComponent, getCurrentInstance, createCommentVNode } from 'vue'\nimport { useGeometries } from '@vue-cesium/composables'\nimport { kebabCase } from '@vue-cesium/utils/util'\nimport { positions, granularity, maximumHeights, minimumHeights, ellipsoid, vertexFormat } from '@vue-cesium/utils/cesium-props'\nimport { commonEmits } from '@vue-cesium/utils/emits'\nexport const wallGeometryProps = {\n  ...positions,\n  ...granularity,\n  ...maximumHeights,\n  ...minimumHeights,\n  ...ellipsoid,\n  ...vertexFormat\n}\nexport default defineComponent({\n  name: 'VcGeometryWall',\n  props: wallGeometryProps,\n  emits: commonEmits,\n  setup(props, ctx) {\n    // state\n    const instance = getCurrentInstance() as VcComponentInternalInstance\n    instance.cesiumClass = 'WallGeometry'\n    useGeometries(props, ctx, instance)\n\n    return () => createCommentVNode(kebabCase(instance.proxy?.$options.name || 'v-if'))\n  }\n})\n\nexport type VcGeometryWallProps = {\n  /**\n   * An array of Cartesian objects, which are the points of the wall.\n   */\n  positions: VcCartesian3Array\n  /**\n   * The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n   */\n  granularity?: number\n  /**\n   * An array parallel to positions that give the maximum height of the wall at positions. If undefined, the height of each position in used.\n   */\n  maximumHeights?: number[]\n  /**\n   * An array parallel to positions that give the minimum height of the wall at positions. If undefined, the height at each position is 0.0.\n   */\n  minimumHeights?: number[]\n  /**\n   * The ellipsoid for coordinate manipulation.\n   */\n  ellipsoid?: Cesium.Ellipsoid\n  /**\n   * The vertex attributes to be computed.\n   */\n  vertexFormat?: Cesium.VertexFormat\n  /**\n   * Triggers before the VcGeometryWall is loaded\n   */\n  onBeforeLoad?: (instance: VcComponentInternalInstance) => void\n  /**\n   * Triggers when the VcGeometryWall is successfully loaded\n   */\n  onReady?: (readyObject: VcReadyObject) => void\n  /**\n   * Triggers when the component load failed.\n   */\n  onUnready?: (e: any) => void\n  /**\n   * Triggers when the VcGeometryWall is destroyed\n   */\n  onDestroyed?: (instance: VcComponentInternalInstance) => void\n}\n\nexport type VcGeometryWallRef = VcComponentPublicInstance<VcGeometryWallProps>\n"],"names":[],"mappings":";;;;;;;;AAcO,MAAM,iBAAoB,GAAA;AAAA,EAC/B,GAAG,SAAA;AAAA,EACH,GAAG,WAAA;AAAA,EACH,GAAG,cAAA;AAAA,EACH,GAAG,cAAA;AAAA,EACH,GAAG,SAAA;AAAA,EACH,GAAG,YAAA;AACL,EAAA;AACA,mBAAe,eAAgB,CAAA;AAAA,EAC7B,IAAM,EAAA,gBAAA;AAAA,EACN,KAAO,EAAA,iBAAA;AAAA,EACP,KAAO,EAAA,WAAA;AAAA,EACP,KAAA,CAAM,OAAO,GAAK,EAAA;AAEhB,IAAA,MAAM,WAAW,kBAAmB,EAAA,CAAA;AACpC,IAAA,QAAA,CAAS,WAAc,GAAA,cAAA,CAAA;AACvB,IAAc,aAAA,CAAA,KAAA,EAAO,KAAK,QAAQ,CAAA,CAAA;AAElC,IAAA,OAAO,MAAG;AAhCd,MAAA,IAAA,EAAA,CAAA;AAgCiB,MAAA,OAAA,kBAAA,CAAmB,YAAU,EAAS,GAAA,QAAA,CAAA,KAAA,KAAT,mBAAgB,QAAS,CAAA,IAAA,KAAQ,MAAM,CAAC,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GACpF;AACF,CAAC,CAAA;;;;"}