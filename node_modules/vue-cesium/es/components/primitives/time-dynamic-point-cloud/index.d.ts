import { PropType } from 'vue';
import type { VcComponentInternalInstance, VcComponentPublicInstance, VcPickEvent, VcReadyObject } from 'vue-cesium/es/utils/types';
export declare const timeDynamicPointCloudProps: {
    enableMouseEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    clippingPlanes: PropType<Cesium.ClippingPlaneCollection | import("vue-cesium/es/utils/types").VcCallbackPropertyFunction<Cesium.ClippingPlaneCollection>>;
    tileStyle: {
        type: PropType<Cesium.Cesium3DTileStyle>;
    };
    shading: ObjectConstructor;
    maximumMemoryUsage: {
        type: NumberConstructor;
        default: number;
    };
    shadows: PropType<number | Cesium.CallbackProperty | import("vue-cesium/es/utils/types").VcCallbackPropertyFunction<number>>;
    modelMatrix: PropType<Cesium.Matrix4>;
    show: {
        type: PropType<boolean>;
        default: boolean;
    };
    intervals: PropType<Cesium.TimeIntervalCollection>;
    clock: PropType<Cesium.Clock>;
};
declare const _default: import("vue").DefineComponent<{
    enableMouseEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    clippingPlanes: PropType<Cesium.ClippingPlaneCollection | import("vue-cesium/es/utils/types").VcCallbackPropertyFunction<Cesium.ClippingPlaneCollection>>;
    tileStyle: {
        type: PropType<Cesium.Cesium3DTileStyle>;
    };
    shading: ObjectConstructor;
    maximumMemoryUsage: {
        type: NumberConstructor;
        default: number;
    };
    shadows: PropType<number | Cesium.CallbackProperty | import("vue-cesium/es/utils/types").VcCallbackPropertyFunction<number>>;
    modelMatrix: PropType<Cesium.Matrix4>;
    show: {
        type: PropType<boolean>;
        default: boolean;
    };
    intervals: PropType<Cesium.TimeIntervalCollection>;
    clock: PropType<Cesium.Clock>;
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    frameChanged: (evt: Cesium.TimeDynamicPointCloud) => boolean;
    frameFailed: (evt: Error) => boolean;
    readyPromise: (primitive: import("vue-cesium/es/utils/types").VcPrimitive, viewer: Cesium.Viewer, instance: VcComponentPublicInstance) => boolean;
    'update:geometryInstances': (instances: Cesium.GeometryInstance[]) => boolean;
    mousedown: (evt: VcPickEvent) => boolean;
    mouseup: (evt: VcPickEvent) => boolean;
    click: (evt: VcPickEvent) => boolean;
    clickout: (evt: VcPickEvent) => boolean;
    dblclick: (evt: VcPickEvent) => boolean;
    mousemove: (evt: VcPickEvent) => boolean;
    mouseover: (evt: VcPickEvent) => boolean;
    mouseout: (evt: VcPickEvent) => boolean;
    beforeLoad: (instance: VcComponentInternalInstance) => boolean;
    ready: (readyObj: VcReadyObject) => boolean;
    unready: (e: any) => boolean;
    destroyed: (instance: VcComponentInternalInstance) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    enableMouseEvent: {
        type: BooleanConstructor;
        default: boolean;
    };
    clippingPlanes: PropType<Cesium.ClippingPlaneCollection | import("vue-cesium/es/utils/types").VcCallbackPropertyFunction<Cesium.ClippingPlaneCollection>>;
    tileStyle: {
        type: PropType<Cesium.Cesium3DTileStyle>;
    };
    shading: ObjectConstructor;
    maximumMemoryUsage: {
        type: NumberConstructor;
        default: number;
    };
    shadows: PropType<number | Cesium.CallbackProperty | import("vue-cesium/es/utils/types").VcCallbackPropertyFunction<number>>;
    modelMatrix: PropType<Cesium.Matrix4>;
    show: {
        type: PropType<boolean>;
        default: boolean;
    };
    intervals: PropType<Cesium.TimeIntervalCollection>;
    clock: PropType<Cesium.Clock>;
}>> & {
    onBeforeLoad?: (instance: VcComponentInternalInstance) => any;
    onReady?: (readyObj: VcReadyObject) => any;
    onUnready?: (e: any) => any;
    onDestroyed?: (instance: VcComponentInternalInstance) => any;
    onMousedown?: (evt: VcPickEvent) => any;
    onMouseup?: (evt: VcPickEvent) => any;
    onClick?: (evt: VcPickEvent) => any;
    onClickout?: (evt: VcPickEvent) => any;
    onDblclick?: (evt: VcPickEvent) => any;
    onMousemove?: (evt: VcPickEvent) => any;
    onMouseover?: (evt: VcPickEvent) => any;
    onMouseout?: (evt: VcPickEvent) => any;
    onReadyPromise?: (primitive: import("vue-cesium/es/utils/types").VcPrimitive, viewer: Cesium.Viewer, instance: VcComponentPublicInstance) => any;
    "onUpdate:geometryInstances"?: (instances: Cesium.GeometryInstance[]) => any;
    onFrameChanged?: (evt: Cesium.TimeDynamicPointCloud) => any;
    onFrameFailed?: (evt: Error) => any;
}, {
    show: boolean;
    enableMouseEvent: boolean;
    maximumMemoryUsage: number;
}>;
export default _default;
export type VcPrimitiveTimeDynamicPointCloudProps = {
    /**
     * A Clock instance that is used when determining the value for the time dimension.
     */
    clock: Cesium.Clock;
    /**
     * A TimeIntervalCollection with its data property being an object containing a uri to a 3D Tiles Point Cloud tile and an optional transform.
     */
    intervals: Cesium.TimeIntervalCollection;
    /**
     * Determines if the point cloud will be shown.
     * Default value: true
     */
    show?: boolean;
    /**
     * A 4x4 transformation matrix that transforms the point cloud.
     */
    modelMatrix?: Cesium.Matrix4;
    /**
     * Determines whether the point cloud casts or receives shadows from light sources.
     * Default value: Cesium.ShadowMode.ENABLED
     */
    shadows?: number | Cesium.ShadowMode;
    /**
     * The maximum amount of memory in MB that can be used by the point cloud.
     * Default value: 256
     */
    maximumMemoryUsage?: number;
    /**
     * Options for constructing a PointCloudShading object to control point attenuation and eye dome lighting.
     */
    shading?: any;
    /**
     * The style, defined using the 3D Tiles Styling language, applied to each point in the point cloud.
     */
    tileStyle?: Cesium.Cesium3DTileStyle;
    /**
     * The ClippingPlaneCollection used to selectively disable rendering the point cloud.
     */
    clippingPlanes?: Cesium.ClippingPlaneCollection;
    /**
     * Specifies whether to respond to mouse pick events.
     * Default Value: true
     */
    enableMouseEvent?: boolean;
    /**
     * Triggers before the component is loaded.
     */
    onBeforeLoad?: (instance: VcComponentInternalInstance) => void;
    /**
     * Triggers when the component is successfully loaded.
     */
    onReady?: (readyObject: VcReadyObject) => void;
    /**
     * Triggers when the component load failed.
     */
    onUnready?: (e: any) => void;
    /**
     * Triggers when the component is destroyed.
     */
    onDestroyed?: (instance: VcComponentInternalInstance) => void;
    /**
     * Triggers when the mouse is pressed on this primitive.
     */
    onMousedown?: (evt: VcPickEvent) => void;
    /**
     * Triggers when the mouse bounces up on this primitive.
     */
    onMouseup?: (evt: VcPickEvent) => void;
    /**
     * Triggers when the mouse clicks on this primitive.
     */
    onClick?: (evt: VcPickEvent) => void;
    /**
     * Triggers when the mouse clicks outside this primitive.
     */
    onClickout?: (evt: VcPickEvent) => void;
    /**
     * Triggers when the left mouse button double-clicks this primitive.
     */
    onDblclick?: (evt: VcPickEvent) => void;
    /**
     * Triggers when the mouse moves on this primitive.
     */
    onMousemove?: (evt: VcPickEvent) => void;
    /**
     * Triggers when the mouse moves over to this primitive.
     */
    onMouseover?: (evt: VcPickEvent) => void;
    /**
     * Triggers when the mouse moves out of this primitive.
     */
    onMouseout?: (evt: VcPickEvent) => void;
    /**
     * Triggers when the primitive is ready to render.
     */
    onReadyPromise?: (primitive: Cesium.Primitive, viewer: Cesium.Viewer, instance: VcComponentPublicInstance) => void;
    /**
     * Triggers when a new frame was rendered.
     */
    frameChanged?: (evt: Cesium.TimeDynamicPointCloud) => void;
    /**
     * Triggers when a frame failed to load.
     */
    frameFailed?: (evt: Error) => void;
};
export type VcPrimitiveTimeDynamicPointCloudRef = VcComponentPublicInstance<VcPrimitiveTimeDynamicPointCloudProps>;
