import { defineComponent, getCurrentInstance, createCommentVNode } from 'vue';
import '../../../composables/index.mjs';
import { clock, show, modelMatrix, shadows, maximumMemoryUsage, tileStyle, clippingPlanes, enableMouseEvent } from '../../../utils/cesium-props.mjs';
import { kebabCase } from '../../../utils/util.mjs';
import { primitiveEmits } from '../../../utils/emits.mjs';
import usePrimitives from '../../../composables/use-primitives/index.mjs';

"use strict";
const timeDynamicPointCloudProps = {
  ...clock,
  intervals: Object,
  ...show,
  ...modelMatrix,
  ...shadows,
  ...maximumMemoryUsage,
  shading: Object,
  ...tileStyle,
  ...clippingPlanes,
  ...enableMouseEvent
};
var PrimitiveTimeDynamicPointCloud = defineComponent({
  name: "VcPrimitiveTimeDynamicPointCloud",
  props: timeDynamicPointCloudProps,
  emits: {
    ...primitiveEmits,
    frameChanged: (evt) => true,
    frameFailed: (evt) => true
  },
  setup(props, ctx) {
    const instance = getCurrentInstance();
    instance.cesiumClass = "VcPrimitiveTimeDynamicPointCloud";
    instance.cesiumEvents = ["frameChanged", "frameFailed"];
    const primitivesState = usePrimitives(props, ctx, instance);
    instance.createCesiumObject = async () => {
      const options = primitivesState == null ? void 0 : primitivesState.transformProps(props);
      options.style = options.tileStyle;
      delete options.tileStyle;
      return new Cesium.TimeDynamicPointCloud(options);
    };
    return () => {
      var _a;
      return createCommentVNode(kebabCase(((_a = instance.proxy) == null ? void 0 : _a.$options.name) || ""));
    };
  }
});

export { PrimitiveTimeDynamicPointCloud as default, timeDynamicPointCloudProps };
//# sourceMappingURL=index.mjs.map
