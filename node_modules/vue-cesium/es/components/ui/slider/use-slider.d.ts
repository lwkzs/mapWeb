export declare const keyCodes: number[];
export declare const useSliderProps: {
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    innerMin: NumberConstructor;
    innerMax: NumberConstructor;
    step: {
        type: NumberConstructor;
        default: number;
        validator: (v: any) => boolean;
    };
    snap: BooleanConstructor;
    vertical: BooleanConstructor;
    reverse: BooleanConstructor;
    hideSelection: BooleanConstructor;
    color: StringConstructor;
    markerLabelsClass: StringConstructor;
    label: BooleanConstructor;
    labelColor: StringConstructor;
    labelTextColor: StringConstructor;
    labelAlways: BooleanConstructor;
    switchLabelSide: BooleanConstructor;
    markers: (NumberConstructor | BooleanConstructor)[];
    markerLabels: (ObjectConstructor | ArrayConstructor | FunctionConstructor | BooleanConstructor)[];
    switchMarkerLabelsSide: BooleanConstructor;
    trackImg: StringConstructor;
    trackColor: StringConstructor;
    innerTrackImg: StringConstructor;
    innerTrackColor: StringConstructor;
    selectionColor: StringConstructor;
    selectionImg: StringConstructor;
    thumbSize: {
        type: StringConstructor;
        default: string;
    };
    trackSize: {
        type: StringConstructor;
        default: string;
    };
    disable: BooleanConstructor;
    readonly: BooleanConstructor;
    dense: BooleanConstructor;
    tabindex: (NumberConstructor | StringConstructor)[];
    thumbColor: StringConstructor;
    thumbPath: {
        type: StringConstructor;
        default: string;
    };
    name: StringConstructor;
    dark: {
        type: BooleanConstructor;
        default: any;
    };
};
export declare const useSliderEmits: string[];
export default function ({ updateValue, updatePosition, getDragging, formAttrs }: {
    updateValue: any;
    updatePosition: any;
    getDragging: any;
    formAttrs: any;
}): {
    state: {
        active: import("vue").Ref<boolean>;
        focus: import("vue").Ref<boolean>;
        preventFocus: import("vue").Ref<boolean>;
        dragging: import("vue").Ref<boolean>;
        editable: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<string>;
        tabindex: import("vue").ComputedRef<any>;
        attributes: import("vue").ComputedRef<{
            role: string;
            'aria-valuemin': any;
            'aria-valuemax': any;
            'aria-orientation': string;
            'data-step': any;
        }>;
        step: import("vue").ComputedRef<any>;
        decimals: import("vue").ComputedRef<number>;
        trackLen: import("vue").ComputedRef<number>;
        innerMin: import("vue").ComputedRef<any>;
        innerMinRatio: import("vue").ComputedRef<number>;
        innerMax: import("vue").ComputedRef<any>;
        innerMaxRatio: import("vue").ComputedRef<number>;
        positionProp: import("vue").ComputedRef<"top" | "right" | "bottom" | "left">;
        sizeProp: import("vue").ComputedRef<"height" | "width">;
        isReversed: import("vue").ComputedRef<boolean>;
    };
    methods: {
        onActivate: (evt: any) => void;
        onMobileClick: (evt: any) => void;
        onBlur: () => void;
        onKeyup: (evt: any) => void;
        getContent: (selectionBarStyle: any, trackContainerTabindex: any, trackContainerEvents: any, injectThumb: any) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[];
        getThumbRenderFn: (thumb: any) => () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
        convertRatioToModel: (ratio: any) => any;
        convertModelToRatio: (model: any) => number;
        getDraggingRatio: (evt: any, dragging: any) => any;
    };
};
