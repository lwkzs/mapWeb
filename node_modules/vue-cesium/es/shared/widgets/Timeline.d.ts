import TimelineHighlightRange from './TimelineHighlightRange';
import TimelineTrack from './TimelineTrack';
export default class VcTimeline {
    container: Element;
    _topDiv: HTMLDivElement;
    _endJulian: any;
    _epochJulian: any;
    _lastXPos: any;
    _scrubElement: any;
    _startJulian: any;
    _timeBarSecondsSpan: any;
    _clock: Cesium.Clock;
    _scrubJulian: Cesium.JulianDate;
    _mainTicSpan: number;
    _mouseMode: number;
    _touchMode: number;
    _touchState: {
        centerX: number;
        spanX: number;
    };
    _mouseX: number;
    _timelineDrag: number;
    _timelineDragLocation: any;
    _lastHeight: any;
    _lastWidth: any;
    _timeBarEle: any;
    _trackContainer: any;
    _trackListEle: any;
    _needleEle: any;
    _rulerEle: any;
    _context: any;
    _trackList: any[];
    _highlightRanges: any[];
    _onMouseDown: (e: any) => void;
    _onMouseUp: (e: any) => void;
    _onMouseMove: (e: any) => void;
    _onMouseWheel: (e: any) => void;
    _onTouchStart: (e: any) => void;
    _onTouchMove: (e: any) => void;
    _onTouchEnd: (e: any) => void;
    constructor(container: Element, clock: Cesium.Clock);
    smallestTicInPixels: number;
    addEventListener(type: any, listener: any, useCapture: any): void;
    removeEventListener(type: any, listener: any, useCapture: any): void;
    isDestroyed(): boolean;
    destroy(): void;
    addHighlightRange(color: any, heightInPx: any, base: any): TimelineHighlightRange;
    addTrack(interval: any, heightInPx: any, color: any, backgroundColor: any): TimelineTrack;
    resize(): void;
    zoomTo(startTime: any, stopTime: any): void;
    updateFromClock(): void;
    _setTimeBarTime(xPos: any, seconds: any): void;
    zoomFrom(amount: any): void;
    makeLabel(time: any): string;
    _makeTics(): void;
}
