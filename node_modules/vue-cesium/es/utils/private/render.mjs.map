{"version":3,"file":"render.mjs","sources":["../../../../../packages/utils/private/render.ts"],"sourcesContent":["import { h, withDirectives } from 'vue'\n\nexport function hSlot(slot, otherwise?) {\n  return slot !== void 0 ? slot() : otherwise\n}\n\nexport function hUniqueSlot(slot, otherwise) {\n  return slot !== void 0 ? slot().slice() : otherwise\n}\n\n/**\n * Source definitely exists,\n * so it's merged with the possible slot\n */\nexport function hMergeSlot(slot, source) {\n  return slot !== void 0 ? source.concat(slot()) : source\n}\n\n/**\n * Merge with possible slot,\n * even if source might not exist\n */\nexport function hMergeSlotSafely(slot, source) {\n  if (slot === void 0) {\n    return source\n  }\n\n  return source !== void 0 ? source.concat(slot()) : slot()\n}\n\n/*\n * (String)  key       - unique vnode key\n * (Boolean) condition - should change ONLY when adding/removing directive\n */\nexport function hDir(tag, data, children?, key?, condition?, getDirsFn?) {\n  data.key = key + condition\n\n  const vnode = h(tag, data, children)\n\n  return condition === true ? withDirectives(vnode, getDirsFn()) : vnode\n}\n"],"names":[],"mappings":";;;AAEgB,SAAA,KAAA,CAAM,MAAM,SAAY,EAAA;AACtC,EAAO,OAAA,IAAA,KAAS,KAAS,CAAA,GAAA,IAAA,EAAS,GAAA,SAAA,CAAA;AACpC,CAAA;AAEgB,SAAA,WAAA,CAAY,MAAM,SAAW,EAAA;AAC3C,EAAA,OAAO,IAAS,KAAA,KAAA,CAAA,GAAS,IAAK,EAAA,CAAE,OAAU,GAAA,SAAA,CAAA;AAC5C,CAAA;AAMgB,SAAA,UAAA,CAAW,MAAM,MAAQ,EAAA;AACvC,EAAA,OAAO,SAAS,KAAS,CAAA,GAAA,MAAA,CAAO,MAAO,CAAA,IAAA,EAAM,CAAI,GAAA,MAAA,CAAA;AACnD,CAAA;AAMgB,SAAA,gBAAA,CAAiB,MAAM,MAAQ,EAAA;AAC7C,EAAA,IAAI,SAAS,KAAQ,CAAA,EAAA;AACnB,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AAEA,EAAA,OAAO,WAAW,KAAS,CAAA,GAAA,MAAA,CAAO,OAAO,IAAK,EAAC,IAAI,IAAK,EAAA,CAAA;AAC1D,CAAA;AAMO,SAAS,KAAK,GAAK,EAAA,IAAA,EAAM,QAAW,EAAA,GAAA,EAAM,WAAY,SAAY,EAAA;AACvE,EAAA,IAAA,CAAK,MAAM,GAAM,GAAA,SAAA,CAAA;AAEjB,EAAA,MAAM,KAAQ,GAAA,CAAA,CAAE,GAAK,EAAA,IAAA,EAAM,QAAQ,CAAA,CAAA;AAEnC,EAAA,OAAO,cAAc,IAAO,GAAA,cAAA,CAAe,KAAO,EAAA,SAAA,EAAW,CAAI,GAAA,KAAA,CAAA;AACnE;;;;"}