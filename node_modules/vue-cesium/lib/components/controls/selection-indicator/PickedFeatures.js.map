{"version":3,"file":"PickedFeatures.js","sources":["../../../../../../packages/components/controls/selection-indicator/PickedFeatures.ts"],"sourcesContent":["class PickedFeatures {\n  allFeaturesAvailablePromise: any\n  isLoading: boolean\n  pickPosition: any\n  features: any[]\n  error: any\n  providerCoords: any\n  constructor() {\n    const { knockout } = Cesium\n    /**\n     * Gets or sets a promise that indicates, when it resolves, that all picked features are available in the\n     * {@see PickedFeatures#features} array.\n     * @type {Promise}\n     */\n    this.allFeaturesAvailablePromise = undefined\n\n    /**\n     * Gets or sets a value indicating whether the list of picked features is still loading.\n     * @type {Boolean}\n     */\n    this.isLoading = true\n\n    /**\n     * Gets or sets the ground position that was picked, if any.\n     * @type {Cartesian3}\n     */\n    this.pickPosition = undefined\n\n    /**\n     * Gets or sets the array of picked features.  The array is observable and may be updated up until the point that\n     * {@see PickedFeatures#allFeaturesAvailablePromise} resolves.\n     * @type {Entity[]}\n     */\n    this.features = []\n\n    /**\n     * Gets or sets a message describing an error that occurred while picking features.\n     * If this property is undefined, no error occurred.\n     * @type {String}\n     */\n    this.error = undefined\n\n    this.providerCoords = undefined\n\n    knockout.track(this, ['isLoading', 'features', 'error'])\n  }\n}\n\nexport default PickedFeatures\n"],"names":[],"mappings":";;;;;AAAA,MAAM,cAAe,CAAA;AAAA,EAOnB,WAAc,GAAA;AACZ,IAAM,MAAA,EAAE,UAAa,GAAA,MAAA,CAAA;AAMrB,IAAA,IAAA,CAAK,2BAA8B,GAAA,KAAA,CAAA,CAAA;AAMnC,IAAA,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;AAMjB,IAAA,IAAA,CAAK,YAAe,GAAA,KAAA,CAAA,CAAA;AAOpB,IAAA,IAAA,CAAK,WAAW,EAAC,CAAA;AAOjB,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA,CAAA;AAEb,IAAA,IAAA,CAAK,cAAiB,GAAA,KAAA,CAAA,CAAA;AAEtB,IAAA,QAAA,CAAS,MAAM,IAAM,EAAA,CAAC,WAAa,EAAA,UAAA,EAAY,OAAO,CAAC,CAAA,CAAA;AAAA,GACzD;AACF;;;;"}