{"version":3,"file":"index.js","sources":["../../../../../../../packages/components/measurements/src/height/index.ts"],"sourcesContent":["/*\n * @Author: zouyaoji@https://github.com/zouyaoji\n * @Date: 2021-10-11 09:17:23\n * @LastEditTime: 2022-06-24 16:56:48\n * @LastEditors: zouyaoji\n * @Description:\n * @FilePath: \\vue-cesium@next\\packages\\components\\measurements\\src\\height\\index.ts\n */\nimport { ComputedRef, defineComponent, Ref } from 'vue'\nimport useDrawingSegment from '@vue-cesium/composables/use-drawing/use-drawing-segment'\nimport { useDrawingActionProps } from '@vue-cesium/composables/use-drawing/props'\nimport type { PropType } from 'vue'\nimport { MeasureUnits } from '@vue-cesium/shared'\nimport type { VcLabelProps, VcPointProps } from '../../../primitive-collections'\nimport type { VcGeometryPolylineProps } from '../../../geometries'\nimport { drawingEmit } from '@vue-cesium/utils/emits'\nimport type { VcPrimitiveGroundPolylineProps, VcPrimitiveProps } from '../../../primitives'\nimport {\n  MeasurementDecimals,\n  VcDrawingDrawEvt,\n  VcDrawingEditorEvt,\n  VcDrawingMouseEvt,\n  VcDrawingPreRenderDatas,\n  VcDrawTipOpts,\n  VcEditorOpts,\n  VcSegmentDrawing\n} from '@vue-cesium/utils/drawing-types'\nimport { VcComponentInternalInstance, VcComponentPublicInstance, VcReadyObject } from '@vue-cesium/utils/types'\n\nexport default defineComponent({\n  name: 'VcMeasurementHeight',\n  props: {\n    ...useDrawingActionProps,\n    measureUnits: Object as PropType<MeasureUnits>,\n    polylineOpts: Object as PropType<VcGeometryPolylineProps>,\n    primitiveOpts: Object as PropType<VcPrimitiveProps & VcPrimitiveGroundPolylineProps>,\n    labelOpts: Object as PropType<VcLabelProps>,\n    locale: String,\n    decimals: Object as PropType<MeasurementDecimals>,\n    autoUpdateLabelPosition: Boolean\n  },\n  emits: drawingEmit,\n  setup(props: VcMeasurementHeightProps, ctx) {\n    // state\n    return useDrawingSegment(props, ctx, 'VcMeasurementHeight')\n  }\n})\n\nexport type VcMeasurementHeightProps = {\n  /**\n   * Specify whether to respond to mouse pick events.\n   */\n  enableMouseEvent?: boolean\n  /**\n   * Specify Whether the drawing object is visible.\n   */\n  show?: boolean\n  /**\n   * Specify whether the drawing result can be edited.\n   */\n  editable?: boolean\n  /**\n   * Specify drawing hints.\n   */\n  drawtip?: VcDrawTipOpts\n  /**\n   * Specify parameters for drawing points.\n   */\n  pointOpts?: VcPointProps\n  /**\n   * Specify editor options.\n   */\n  editorOpts?: VcEditorOpts\n  /**\n   * Specify editor mode.\n   */\n  mode?: number\n  /**\n   * Specify prerender datas.\n   */\n  preRenderDatas?: VcDrawingPreRenderDatas\n  /**\n   * Specify the unit of measurement\n   */\n  measureUnits?: MeasureUnits\n  /**\n   * Specify parameters for drawing polylines.\n   */\n  polylineOpts?: VcGeometryPolylineProps\n  /**\n   * Specify parameters for drawing primitives.\n   */\n  primitiveOpts?: VcPrimitiveProps & VcPrimitiveGroundPolylineProps\n  /**\n   * Specify parameters for measurement labels.\n   */\n  labelOpts?: VcLabelProps\n  /**\n   * Specify parameters for measurement locale.\n   */\n  locale?: string\n  /**\n   * Specify parameters for measurement decimals.\n   */\n  decimals?: MeasurementDecimals\n  /**\n   * Specify whether the depthTest is disabled.\n   * Default value: false\n   */\n  disableDepthTest?: boolean\n  /**\n   * Specify whether to update label position.\n   * Default value: true\n   */\n  autoUpdateLabelPosition?: boolean\n  /**\n   * Triggers before the VcMeasurementHeight is loaded.\n   */\n  onBeforeLoad?: (instance: VcComponentInternalInstance) => void\n  /**\n   * Triggers when the VcMeasurementHeight is successfully loaded.\n   */\n  onReady?: (readyObject: VcReadyObject) => void\n  /**\n   * Triggers when the component load failed.\n   */\n  onUnready?: (e: any) => void\n  /**\n   * Triggers when the VcMeasurementHeight is destroyed.\n   */\n  onDestroyed?: (instance: VcComponentInternalInstance) => void\n  /**\n   * Triggers when drawing.\n   */\n  onDrawEvt?: (evt: VcDrawingDrawEvt<VcSegmentDrawing>, viewer: Cesium.Viewer) => void\n  /**\n   * Triggers when the editor button is clicked.\n   */\n  onEditorEvt?: (evt: VcDrawingEditorEvt, viewer: Cesium.Viewer) => void\n  /**\n   * Triggers when the mouse is over or out on the drawing point.\n   */\n  onMouseEvt?: (evt: VcDrawingMouseEvt, viewer: Cesium.Viewer) => void\n}\n\nexport interface VcMeasurementHeightRef extends VcComponentPublicInstance<VcMeasurementHeightProps> {\n  /**\n   * Get the array of rendering models.\n   */\n  renderDatas?: Ref<VcSegmentDrawing[]>\n  /**\n   * Get the computedRenderDatas.\n   */\n  computedRenderDatas?: ComputedRef<VcSegmentDrawing[]>\n  /**\n   * start a new draw.\n   */\n  startNew: () => void\n  /**\n   * stop drawing.\n   */\n  stop: (removeLatest?: boolean) => void\n  /**\n   * clear and stop drawing.\n   */\n  clear: () => void\n}\n"],"names":["defineComponent","useDrawingActionProps","drawingEmit","useDrawingSegment"],"mappings":";;;;;;;;;;AA6BA,0BAAeA,mBAAgB,CAAA;AAAA,EAC7B,IAAM,EAAA,qBAAA;AAAA,EACN,KAAO,EAAA;AAAA,IACL,GAAGC,2BAAA;AAAA,IACH,YAAc,EAAA,MAAA;AAAA,IACd,YAAc,EAAA,MAAA;AAAA,IACd,aAAe,EAAA,MAAA;AAAA,IACf,SAAW,EAAA,MAAA;AAAA,IACX,MAAQ,EAAA,MAAA;AAAA,IACR,QAAU,EAAA,MAAA;AAAA,IACV,uBAAyB,EAAA,OAAA;AAAA,GAC3B;AAAA,EACA,KAAO,EAAAC,iBAAA;AAAA,EACP,KAAA,CAAM,OAAiC,GAAK,EAAA;AAE1C,IAAO,OAAAC,4BAAA,CAAkB,KAAO,EAAA,GAAA,EAAK,qBAAqB,CAAA,CAAA;AAAA,GAC5D;AACF,CAAC,CAAA;;;;"}