import { PropType } from 'vue';
import type { VcColor, VcComponentInternalInstance } from 'vue-cesium/es/utils/types';
export declare const viewshedProps: {
    fovH: {
        type: NumberConstructor;
        default: number;
    };
    fovV: {
        type: NumberConstructor;
        default: number;
    };
    offsetHeight: {
        type: NumberConstructor;
        default: number;
    };
    visibleColor: {
        type: PropType<VcColor>;
        default: string;
    };
    invisibleColor: {
        type: PropType<VcColor>;
        default: string;
    };
    showGridLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    lineColor: {
        type: PropType<VcColor>;
        default: string;
    };
    faceColor: {
        type: PropType<VcColor>;
        default: string;
    };
    show: {
        type: BooleanConstructor;
        default: boolean;
    };
    startPosition: {
        type: PropType<Cesium.Cartesian3>;
    };
    endPosition: {
        type: PropType<Cesium.Cartesian3>;
    };
    fragmentShader: {
        type: StringConstructor;
    };
    uniforms: ObjectConstructor;
    scene: PropType<Cesium.Scene>;
};
declare const _default: import("vue").DefineComponent<{
    fovH: {
        type: NumberConstructor;
        default: number;
    };
    fovV: {
        type: NumberConstructor;
        default: number;
    };
    offsetHeight: {
        type: NumberConstructor;
        default: number;
    };
    visibleColor: {
        type: PropType<VcColor>;
        default: string;
    };
    invisibleColor: {
        type: PropType<VcColor>;
        default: string;
    };
    showGridLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    lineColor: {
        type: PropType<VcColor>;
        default: string;
    };
    faceColor: {
        type: PropType<VcColor>;
        default: string;
    };
    show: {
        type: BooleanConstructor;
        default: boolean;
    };
    startPosition: {
        type: PropType<Cesium.Cartesian3>;
    };
    endPosition: {
        type: PropType<Cesium.Cartesian3>;
    };
    fragmentShader: {
        type: StringConstructor;
    };
    uniforms: ObjectConstructor;
    scene: PropType<Cesium.Scene>;
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    beforeLoad: (instance: VcComponentInternalInstance) => boolean;
    ready: (readyObj: import("vue-cesium/es/utils/types").VcReadyObject) => boolean;
    unready: (e: any) => boolean;
    destroyed: (instance: VcComponentInternalInstance) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    fovH: {
        type: NumberConstructor;
        default: number;
    };
    fovV: {
        type: NumberConstructor;
        default: number;
    };
    offsetHeight: {
        type: NumberConstructor;
        default: number;
    };
    visibleColor: {
        type: PropType<VcColor>;
        default: string;
    };
    invisibleColor: {
        type: PropType<VcColor>;
        default: string;
    };
    showGridLine: {
        type: BooleanConstructor;
        default: boolean;
    };
    lineColor: {
        type: PropType<VcColor>;
        default: string;
    };
    faceColor: {
        type: PropType<VcColor>;
        default: string;
    };
    show: {
        type: BooleanConstructor;
        default: boolean;
    };
    startPosition: {
        type: PropType<Cesium.Cartesian3>;
    };
    endPosition: {
        type: PropType<Cesium.Cartesian3>;
    };
    fragmentShader: {
        type: StringConstructor;
    };
    uniforms: ObjectConstructor;
    scene: PropType<Cesium.Scene>;
}>> & {
    onBeforeLoad?: (instance: VcComponentInternalInstance) => any;
    onReady?: (readyObj: import("vue-cesium/es/utils/types").VcReadyObject) => any;
    onUnready?: (e: any) => any;
    onDestroyed?: (instance: VcComponentInternalInstance) => any;
}, {
    show: boolean;
    offsetHeight: number;
    fovH: number;
    fovV: number;
    visibleColor: VcColor;
    invisibleColor: VcColor;
    showGridLine: boolean;
    lineColor: VcColor;
    faceColor: VcColor;
}>;
export default _default;
