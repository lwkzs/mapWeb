import BaiduMapMercatorTilingScheme from './BaiduMapTilingScheme';
declare class BaiduMapImageryProvider {
    _url: string;
    _ready: boolean;
    _resource: Cesium.Resource;
    _tileDiscardPolicy: any;
    _tileWidth: number;
    _tileHeight: number;
    _minimumLevel: number;
    _maximumLevel: number;
    _tilingScheme: BaiduMapMercatorTilingScheme;
    _rectangle: Cesium.Rectangle;
    _credit: Cesium.Credit;
    enablePickFeatures: boolean;
    _hasAlphaChannel: boolean;
    _subdomains: string[];
    _errorEvent: Cesium.Event;
    _labelStyle: string;
    _qt: 'tile' | 'vtile';
    _styles: 'sl' | 'pl' | 'ph';
    _scale: '1' | '2';
    _showtext: '0' | '1';
    _ak: string;
    _mapStyle: 'img' | 'vec' | 'traffic' | 'normal' | 'light' | 'dark' | 'redalert' | 'googlelite' | 'grassgreen' | 'midnight' | 'pink' | 'darkgreen' | 'bluish' | 'grayscale' | 'hardedge';
    constructor(options: any);
    get url(): string;
    get proxy(): Cesium.Proxy;
    get tileWidth(): number;
    get tileHeight(): number;
    get maximumLevel(): number;
    get minimumLevel(): number;
    get tilingScheme(): BaiduMapMercatorTilingScheme;
    get rectangle(): Cesium.Rectangle;
    get tileDiscardPolicy(): any;
    get errorEvent(): Cesium.Event<(...args: any[]) => void>;
    get ready(): boolean;
    get credit(): Cesium.Credit;
    get hasAlphaChannel(): boolean;
    getTileCredits(x: any, y: any, level: any): any;
    requestImage(x: any, y: any, level: any, request: any): Promise<Cesium.ImageryTypes | Cesium.CompressedTextureBuffer>;
    pickFeatures(x: any, y: any, level: any, longitude: any, latitude: any): any;
}
export default BaiduMapImageryProvider;
