{"version":3,"file":"index.js","sources":["../../../../../../packages/components/providers/supermap/index.ts"],"sourcesContent":["/*\n * @Author: zouyaoji@https://github.com/zouyaoji\n * @Date: 2021-09-16 09:28:13\n * @LastEditTime: 2023-10-23 14:47:29\n * @LastEditors: zouyaoji 370681295@qq.com\n * @Description:\n * @FilePath: \\vue-cesium@next\\packages\\components\\providers\\supermap\\index.ts\n */\nimport type { PropType } from 'vue'\nimport { createCommentVNode, defineComponent, getCurrentInstance } from 'vue'\nimport type { ProjectionTransforms, VcComponentInternalInstance, VcComponentPublicInstance, VcReadyObject } from '@vue-cesium/utils/types'\nimport { useProviders } from '@vue-cesium/composables'\nimport { minimumLevel, maximumLevel, projectionTransforms } from '@vue-cesium/utils/cesium-props'\nimport SuperMapImageryProvider from './SuperMapImageryProvider'\nimport { kebabCase } from '@vue-cesium/utils/util'\nimport { providerEmits } from '@vue-cesium/utils/emits'\n\nexport const supermapImageryProviderProps = {\n  url: String,\n  ...minimumLevel,\n  ...maximumLevel,\n  name: String,\n  transparent: {\n    type: Boolean,\n    default: true\n  },\n  credit: {\n    type: [String, Object] as PropType<string | Cesium.Credit>,\n    default: 'MapQuest, SuperMap iServer Imagery'\n  },\n  ...projectionTransforms\n}\nexport default defineComponent({\n  name: 'VcImageryProviderSupermap',\n  props: supermapImageryProviderProps,\n  emits: providerEmits,\n  setup(props, ctx) {\n    // state\n    const instance = getCurrentInstance() as VcComponentInternalInstance\n    instance.cesiumClass = 'SuperMapImageryProvider'\n    const providersState = useProviders(props, ctx, instance)\n\n    if (undefined === providersState) {\n      return\n    }\n    // methods\n    instance.createCesiumObject = async () => {\n      Cesium.SuperMapImageryProvider = Cesium.SuperMapImageryProvider || SuperMapImageryProvider\n      if (providersState.unwatchFns.length === 0) {\n        providersState.setPropsWatcher(true)\n      }\n      const options = providersState.transformProps(props)\n      const provider = new Cesium.SuperMapImageryProvider(options)\n      if (!Cesium.SuperMapVersion) {\n        await provider.init()\n      }\n      return provider\n    }\n    return () => createCommentVNode(kebabCase(instance.proxy?.$options.name || ''))\n  }\n})\n\nexport type VcImageryProviderSupermapProps = {\n  /**\n   * The URL of the SuperMap iServer service.\n   */\n  url: string\n  /**\n   * The name of the layer.\n   */\n  name?: string\n  /**\n   * The minimum tile level to request, or undefined if there is no minimum.\n   * Default value: 0\n   */\n  minimumLevel?: number\n  /**\n   * The maximum tile level to request, or undefined if there is no maximum.\n   * Default value: 20\n   */\n  maximumLevel?: number\n  /**\n   * Whether the parameter of the requested map service is transparent.\n   * Default value: true\n   */\n  transparent?: boolean\n  /**\n   * A credit for the data source, which is displayed on the canvas.\n   * Default value: 'MapQuest, SuperMap iServer Imagery'\n   */\n  credit?: string | Cesium.Credit\n  /**\n   * Specify the projection transformation parameters. such as { from: 'BD09', to: 'WGS84' }\n   */\n  projectionTransforms?: ProjectionTransforms\n  /**\n   * Triggers before the VcImageryProviderSupermap is loaded.\n   */\n  onBeforeLoad?: (instance: VcComponentInternalInstance) => void\n  /**\n   * Triggers when the VcImageryProviderSupermap is successfully loaded.\n   */\n  onReady?: (readyObject: VcReadyObject) => void\n  /**\n   * Triggers when the component load failed.\n   */\n  onUnready?: (e: any) => void\n  /**\n   * Triggers when the VcImageryProviderSupermap is destroyed.\n   */\n  onDestroyed?: (instance: VcComponentInternalInstance) => void\n  /**\n   * Triggers when the imagery provider encounters an asynchronous error.\n   */\n  onErrorEvent?: (evt: Cesium.TileProviderError) => void\n  /**\n   * Triggers when the provider is ready for use.\n   */\n  onReadyPromise?: (evt: boolean, viewer: Cesium.Viewer, instance: VcComponentPublicInstance) => void\n}\n\nexport type VcImageryProviderSupermapRef = VcComponentPublicInstance<VcImageryProviderSupermapProps>\n"],"names":["minimumLevel","maximumLevel","projectionTransforms","defineComponent","providerEmits","getCurrentInstance","useProviders","SuperMapImageryProvider","createCommentVNode","kebabCase"],"mappings":";;;;;;;;;;;;;AAiBO,MAAM,4BAA+B,GAAA;AAAA,EAC1C,GAAK,EAAA,MAAA;AAAA,EACL,GAAGA,wBAAA;AAAA,EACH,GAAGC,wBAAA;AAAA,EACH,IAAM,EAAA,MAAA;AAAA,EACN,WAAa,EAAA;AAAA,IACX,IAAM,EAAA,OAAA;AAAA,IACN,OAAS,EAAA,IAAA;AAAA,GACX;AAAA,EACA,MAAQ,EAAA;AAAA,IACN,IAAA,EAAM,CAAC,MAAA,EAAQ,MAAM,CAAA;AAAA,IACrB,OAAS,EAAA,oCAAA;AAAA,GACX;AAAA,EACA,GAAGC,gCAAA;AACL,EAAA;AACA,8BAAeC,mBAAgB,CAAA;AAAA,EAC7B,IAAM,EAAA,2BAAA;AAAA,EACN,KAAO,EAAA,4BAAA;AAAA,EACP,KAAO,EAAAC,mBAAA;AAAA,EACP,KAAA,CAAM,OAAO,GAAK,EAAA;AAEhB,IAAA,MAAM,WAAWC,sBAAmB,EAAA,CAAA;AACpC,IAAA,QAAA,CAAS,WAAc,GAAA,yBAAA,CAAA;AACvB,IAAA,MAAM,cAAiB,GAAAC,gBAAA,CAAa,KAAO,EAAA,GAAA,EAAK,QAAQ,CAAA,CAAA;AAExD,IAAA,IAAI,WAAc,cAAgB,EAAA;AAChC,MAAA,OAAA;AAAA,KACF;AAEA,IAAA,QAAA,CAAS,qBAAqB,YAAY;AACxC,MAAO,MAAA,CAAA,uBAAA,GAA0B,OAAO,uBAA2B,IAAAC,kCAAA,CAAA;AACnE,MAAI,IAAA,cAAA,CAAe,UAAW,CAAA,MAAA,KAAW,CAAG,EAAA;AAC1C,QAAA,cAAA,CAAe,gBAAgB,IAAI,CAAA,CAAA;AAAA,OACrC;AACA,MAAM,MAAA,OAAA,GAAU,cAAe,CAAA,cAAA,CAAe,KAAK,CAAA,CAAA;AACnD,MAAA,MAAM,QAAW,GAAA,IAAI,MAAO,CAAA,uBAAA,CAAwB,OAAO,CAAA,CAAA;AAC3D,MAAI,IAAA,CAAC,OAAO,eAAiB,EAAA;AAC3B,QAAA,MAAM,SAAS,IAAK,EAAA,CAAA;AAAA,OACtB;AACA,MAAO,OAAA,QAAA,CAAA;AAAA,KACT,CAAA;AACA,IAAA,OAAO,MAAG;AA1Dd,MAAA,IAAA,EAAA,CAAA;AA0DiB,MAAA,OAAAC,sBAAA,CAAmBC,iBAAU,EAAS,GAAA,QAAA,CAAA,KAAA,KAAT,mBAAgB,QAAS,CAAA,IAAA,KAAQ,EAAE,CAAC,CAAA,CAAA;AAAA,KAAA,CAAA;AAAA,GAChF;AACF,CAAC,CAAA;;;;;"}