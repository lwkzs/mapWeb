{"version":3,"file":"use-drawing-polyline.js","sources":["../../../../../packages/composables/use-drawing/use-drawing-polyline.ts"],"sourcesContent":["/*\n * @Author: zouyaoji@https://github.com/zouyaoji\n * @Date: 2021-10-21 10:43:32\n * @LastEditTime: 2024-10-08 23:22:33\n * @LastEditors: zouyaoji 370681295@qq.com\n * @Description:\n * @FilePath: \\vue-cesium\\packages\\composables\\use-drawing\\use-drawing-polyline.ts\n */\nimport { VcPrimitive, VcPrimitiveGroundPolyline } from '@vue-cesium/components/primitives'\nimport { VcGeometryInstance } from '@vue-cesium/components/geometry-instance'\nimport { VcGeometryPolyline, VcGeometryGroundPolyline } from '@vue-cesium/components/geometries'\nimport { VcOverlayHtml } from '@vue-cesium/components/overlays'\nimport { VcCollectionLabel, VcCollectionPoint, VcCollectionPrimitive, VcLabelProps, VcPolygon } from '@vue-cesium/components/primitive-collections'\nimport { VcBtn, VcTooltip } from '@vue-cesium/components/ui'\nimport { useLocale } from '../use-locale'\nimport { DrawStatus, MeasureUnits } from '@vue-cesium/shared'\nimport {\n  calculateAreaByPostions,\n  compareCesiumVersion,\n  getFirstIntersection,\n  getGeodesicDistance,\n  makeCartesian3Array\n} from '@vue-cesium/utils/cesium-helpers'\nimport type { VcPolylineDrawing } from '@vue-cesium/utils/drawing-types'\nimport type { VcComponentInternalInstance, VcDrawingProvider, VcReadyObject } from '@vue-cesium/utils/types'\nimport { reactive, VNode } from 'vue'\nimport { computed, getCurrentInstance, nextTick, ref, h } from 'vue'\nimport useCommon from '../use-common'\nimport useDrawingAction from './use-drawing-action'\nimport { VcAnalysesRef, VcDrawingsRef, VcMeasurementsRef } from '@vue-cesium/components'\nimport { platform } from '@vue-cesium/utils/platform'\n\nexport default function (props, ctx, cmpName: string) {\n  const instance = getCurrentInstance() as VcComponentInternalInstance\n\n  const commonState = useCommon(props, ctx, instance)\n  if (commonState === void 0) {\n    return\n  }\n\n  const { t } = useLocale()\n  const $services = commonState.$services as VcDrawingProvider\n  const { emit } = ctx\n\n  const {\n    drawingType,\n    drawTip,\n    drawTipOpts,\n    drawStatus,\n    canShowDrawTip,\n    drawTipPosition,\n    showEditor,\n    editorPosition,\n    mouseoverPoint,\n    editingPoint,\n    primitiveCollectionRef,\n    editorType,\n    onMouseoverPoints,\n    onMouseoutPoints,\n    onMouseenterEditor,\n    onMouseleaveEditor,\n    onPrimitiveCollectionReady,\n    onVcCollectionPointReady,\n    onVcCollectionLabelReady,\n    onVcPrimitiveReady\n  } = useDrawingAction(props, ctx, instance, cmpName, $services)\n\n  let lastClickPosition: Cesium.Cartesian2\n  let restorePosition\n  const mouseDelta = 10\n\n  const renderDatas = ref<Array<VcPolylineDrawing>>([])\n\n  if (props.preRenderDatas && props.preRenderDatas.length) {\n    props.preRenderDatas.forEach(preRenderData => {\n      const polylineDrawing: VcPolylineDrawing = {\n        show: true,\n        positions: makeCartesian3Array(preRenderData) as Array<Cesium.Cartesian3>,\n        tempPositions: [],\n        drawStatus: DrawStatus.AfterDraw,\n        loop: props.loop,\n        distance: 0,\n        area: 0,\n        distances: [],\n        labels: [],\n        angles: [],\n\n        polylineOpts: {},\n        pointOpts: {},\n        labelOpts: {},\n        labelsOpts: {},\n        primitiveOpts: {},\n        polygonOpts: {}\n      }\n\n      renderDatas.value.push(polylineDrawing)\n    })\n  }\n\n  const computedRenderDatas = computed<Array<VcPolylineDrawing>>(() => {\n    const { Cartesian3, createGuid, defined, Math: CesiumMath } = Cesium\n    const polylines: Array<VcPolylineDrawing> = []\n    const { viewer } = $services\n    const angleFormatter = props.angleFormatter || MeasureUnits.angleToString\n    const distanceFormatter = props.distanceFormatter || MeasureUnits.distanceToString\n    const areaFormatter = props.areaFormatter || MeasureUnits.areaToString\n\n    renderDatas.value.forEach((polyline, index) => {\n      const labels = reactive<Array<VcLabelProps>>([])\n      const distances: number[] = []\n      const angles: number[] = []\n      let distance = 0\n      const dashedLines: Array<{\n        positions: Array<Cesium.Cartesian3>\n      }> = []\n      polyline.points = polyline.positions.map(v => {\n        return {\n          position: v\n        }\n      })\n      const positions = polyline.positions.slice()\n      if (cmpName === 'VcAnalysisSightline') {\n        const observationPoint = positions.shift()\n        const destinationPoints = positions\n        observationPoint &&\n          destinationPoints.forEach(destinationPoint => {\n            const positionsNew: Array<Cesium.Cartesian3> = []\n            positionsNew.push(observationPoint)\n\n            const objectsToExclude = []\n            const primitiveCollection: Array<Cesium.PrimitiveCollection> = (primitiveCollectionRef.value.cesiumObject as any)._primitives\n            primitiveCollection.forEach(primitive => {\n              if (primitive instanceof Cesium.PointPrimitiveCollection) {\n                objectsToExclude.push(...primitive._pointPrimitives)\n              }\n              if (primitive instanceof Cesium.Primitive) {\n                objectsToExclude.push(primitive)\n              }\n            })\n            const intersection = getFirstIntersection(observationPoint, destinationPoint, $services.viewer, objectsToExclude)\n            if (defined(intersection)) {\n              positionsNew.push(intersection)\n            }\n            positionsNew.push(destinationPoint)\n            let distance = 0\n            const distances = []\n            for (let i = 0; i < positionsNew.length - 1; i++) {\n              const s = Cartesian3.distance(positionsNew[i], positionsNew[i + 1])\n              distances.push(s)\n              distance = distance + s\n            }\n            polylines.push({\n              ...polyline,\n              positions: positionsNew,\n              distance,\n              distances\n            } as VcPolylineDrawing)\n          })\n      } else {\n        props.loop && positions.length > 2 && positions.push(positions[0])\n        for (let i = 0; i < positions.length - 1; i++) {\n          let s = 0\n          if (props.polylineOpts?.arcType === 0) {\n            s = getGeodesicDistance(positions[i], positions[i + 1], $services.viewer.scene.globe.ellipsoid)\n          } else {\n            s = Cartesian3.distance(positions[i], positions[i + 1])\n          }\n          distances.push(s)\n          distance = distance + s\n          const polylineLabelsOpts = Object.assign({}, props.labelsOpts, polyline.labelsOpts)\n\n          if (s > 0 && positions.length > 2 && props.showDistanceLabel) {\n            labels.push({\n              text: distanceFormatter(s, props.measureUnits?.distanceUnits, props.locale, props.decimals?.distance),\n              position: Cartesian3.midpoint(positions[i], positions[i + 1], {} as any),\n              id: createGuid(),\n              ...polylineLabelsOpts\n            })\n          }\n          if (positions.length > 2 && props.showAngleLabel) {\n            if (i > 0 || props.loop) {\n              const point0 = positions[i === 0 ? positions.length - 2 : i - 1]\n              const point1 = positions[i]\n              const point2 = positions[i + 1]\n              const diffrence1 = Cartesian3.subtract(point0, point1, {} as any)\n              const diffrence2 = Cartesian3.subtract(point2, point1, {} as any)\n              let angle = 0\n              if (!(Cartesian3.ZERO.equals(diffrence1) || Cartesian3.ZERO.equals(diffrence2))) {\n                angle = Cartesian3.angleBetween(diffrence1, diffrence2)\n              }\n              angles.push(angle)\n              labels.push({\n                text: angleFormatter(angle, props.measureUnits?.angleUnits, props.locale, props.decimals?.angle),\n                position: point1,\n                id: createGuid(),\n                ...polylineLabelsOpts\n              })\n            }\n          }\n\n          if (props.showDashedLine) {\n            dashedLines.push({\n              positions: [positions[i], getEndPostion(positions[i])]\n            })\n\n            if (i === positions.length - 2) {\n              dashedLines.push({\n                positions: [positions[i + 1], getEndPostion(positions[i + 1])]\n              })\n            }\n          }\n        }\n        const area = calculateAreaByPostions(positions)\n\n        const polylineLabelOpts = Object.assign({}, props.labelOpts, polyline.labelOpts)\n\n        if (props.showLabel && positions.length) {\n          if (cmpName.includes('Area')) {\n            labels.push({\n              text: areaFormatter(area, props.measureUnits?.areaUnits, props.locale, props.decimals?.area),\n              position: positions[positions.length - 1],\n              id: createGuid(),\n              ...polylineLabelOpts\n            })\n          } else {\n            labels.push({\n              text: distanceFormatter(distance, props.measureUnits?.distanceUnits, props.locale, props.decimals?.distance),\n              position: positions[positions.length - 1],\n              id: createGuid(),\n              ...polylineLabelOpts\n            })\n          }\n        }\n\n        polyline.positionsDegreesArray = polyline.positions.map(v => {\n          const cart = Cesium.Cartographic.fromCartesian(v, viewer.scene.globe.ellipsoid)\n          return [CesiumMath.toDegrees(cart.longitude), CesiumMath.toDegrees(cart.latitude), cart.height]\n        })\n\n        polylines.push({\n          ...polyline,\n          labels,\n          distance,\n          distances,\n          area,\n          angles,\n          dashedLines\n        } as VcPolylineDrawing)\n      }\n    })\n    return polylines\n  })\n\n  // methods\n  instance.mount = async () => {\n    const { viewer } = $services\n    props.autoUpdateLabelPosition && viewer.scene.preRender.addEventListener(updateLabelPosition)\n    return true\n  }\n  instance.unmount = async () => {\n    const { viewer } = $services\n    props.autoUpdateLabelPosition && viewer.scene.preRender.removeEventListener(updateLabelPosition)\n    return true\n  }\n\n  const getEndPostion = (position: Cesium.Cartesian3) => {\n    const { defined, defaultValue } = Cesium\n    const { viewer } = $services\n    const scene = viewer.scene\n    const globe = scene.globe\n    const ellipsoid = scene.frameState.mapProjection.ellipsoid as Cesium.Ellipsoid\n    const positionCartographic = ellipsoid.cartesianToCartographic(position)\n    positionCartographic.height = defined(globe) ? defaultValue(globe.getHeight(positionCartographic), 0) : 0\n    return ellipsoid.cartographicToCartesian(positionCartographic)\n  }\n\n  const updateLabelPosition = () => {\n    computedRenderDatas.value.forEach((polyline, index) => {\n      const positions = polyline.positions\n      if (!(positions.length < 2)) {\n        const { defined, SceneTransforms, Cartesian2, HorizontalOrigin } = Cesium\n        const { viewer } = $services\n        const scene = viewer.scene\n\n        let startPosition = positions[0]\n        const positionWindow = compareCesiumVersion(Cesium.VERSION, '1.121')\n          ? SceneTransforms.worldToWindowCoordinates(scene, startPosition, {} as any)\n          : SceneTransforms['wgs84ToWindowCoordinates'](scene, startPosition, {} as any)\n\n        let startPositionWindow = defined(positionWindow)\n          ? Cartesian2.clone(positionWindow, {} as any)\n          : Cartesian2.fromElements(Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, {} as any)\n        let startY = startPositionWindow.y\n        const primitiveCollection = primitiveCollectionRef.value?.cesiumObject as Cesium.PrimitiveCollection\n        const labelCollection: Array<Cesium.LabelCollection> = (primitiveCollection as any)._primitives.filter(\n          v => v instanceof Cesium.LabelCollection\n        )\n        const labels = labelCollection[index]._labels\n        const labelTotalLength = labels[labels.length - 1]\n        for (let i = 1; i < positions.length; i++) {\n          const positionWindow = compareCesiumVersion(Cesium.VERSION, '1.121')\n            ? SceneTransforms.worldToWindowCoordinates(scene, positions[i], {} as any)\n            : SceneTransforms['wgs84ToWindowCoordinates'](scene, positions[i], {} as any)\n\n          if (defined(positionWindow)) {\n            const l = (startPositionWindow.y - positionWindow.y) / (positionWindow.x - startPositionWindow.x)\n            if (labels[i - 1] !== labelTotalLength) {\n              if (defined(labels[i - 1]?.horizontalOrigin)) {\n                labels[i - 1].horizontalOrigin = 0 < l ? HorizontalOrigin.LEFT : HorizontalOrigin.RIGHT\n              }\n            }\n\n            if (positionWindow.y < startY) {\n              startY = positionWindow.y\n              startPosition = positions[i]\n            }\n\n            startPositionWindow = Cartesian2.clone(positionWindow, startPositionWindow)\n          }\n\n          polyline.drawStatus === DrawStatus.AfterDraw && (labelTotalLength.position = startPosition)\n        }\n      }\n    })\n  }\n\n  const startNew = () => {\n    const polyline: VcPolylineDrawing = {\n      show: false,\n      positions: [],\n      tempPositions: [],\n      drawStatus: DrawStatus.BeforeDraw,\n      loop: props.loop,\n      distance: 0,\n      area: 0,\n      distances: [],\n      labels: [],\n      angles: [],\n\n      polylineOpts: {},\n      pointOpts: {},\n      labelOpts: {},\n      labelsOpts: {},\n      primitiveOpts: {},\n      polygonOpts: {}\n    }\n\n    if (cmpName === 'VcMeasurementHorizontal') {\n      const { Cartesian3, Plane } = Cesium\n      Object.assign(polyline, {\n        dashedLines: [],\n        heightPlane: new Plane(Cartesian3.UNIT_X, 0),\n        heightPlaneCV: new Plane(Cartesian3.UNIT_X, 0),\n        height: 0,\n        firstMove: false,\n        tempNextPos: new Cartesian3()\n      })\n    }\n\n    drawStatus.value = DrawStatus.BeforeDraw\n    renderDatas.value.push(polyline)\n    canShowDrawTip.value = true\n    drawTip.value = drawTipOpts.value.drawingTipStart\n  }\n\n  const stop = (removeLatest = true) => {\n    if (removeLatest && drawStatus.value === DrawStatus.Drawing) {\n      renderDatas.value.pop()\n    }\n    const index = editingPoint.value ? editingPoint.value._vcPolylineIndex : renderDatas.value.length - 1\n    const polyline = renderDatas.value[index] as VcPolylineDrawing\n    if (polyline) {\n      polyline.positions = polyline.tempPositions\n      polyline.drawStatus = DrawStatus.AfterDraw\n    }\n\n    drawStatus.value = DrawStatus.AfterDraw\n    canShowDrawTip.value = false\n    drawTipPosition.value = [0, 0, 0]\n  }\n\n  const handleMouseClick = (movement: Cesium.Cartesian2, options?) => {\n    const { viewer, drawingFabInstance, getWorldPosition, selectedDrawingActionInstance } = $services\n    const drawingFabInstanceVm = drawingFabInstance?.proxy as VcDrawingsRef | VcMeasurementsRef | VcAnalysesRef\n    if (options.button === 2 && options.ctrl) {\n      const drawingsOption = drawingFabInstanceVm.getDrawingActionInstance(drawingType)\n      drawingFabInstanceVm.toggleAction(drawingsOption)\n      nextTick(() => {\n        emit(\n          'drawEvt',\n          {\n            name: drawingType,\n            finished: true,\n            windowPoistion: movement,\n            type: 'cancel'\n          },\n          viewer\n        )\n      })\n      return\n    }\n\n    if (drawStatus.value === DrawStatus.AfterDraw) {\n      startNew()\n    }\n\n    const { defined, Cartesian2, Plane, Cartesian3 } = Cesium\n    const index = editingPoint.value ? editingPoint.value._vcPolylineIndex : renderDatas.value.length - 1\n    const polyline = renderDatas.value[index] as VcPolylineDrawing\n    const tempPositions = polyline.tempPositions\n\n    const pointIndex = editingPoint.value ? editingPoint.value._index : polyline.positions.length - 1\n\n    if (options.button === 2 && editingPoint.value) {\n      if (editorType.value === 'insert') {\n        polyline.positions.splice(editingPoint.value._index, 1)\n      } else {\n        polyline.positions[editingPoint.value._index] = restorePosition\n      }\n      drawStatus.value = DrawStatus.AfterDraw\n      polyline.drawStatus = DrawStatus.AfterDraw\n      editingPoint.value = undefined\n      drawTip.value = drawTipOpts.value.drawingTipStart\n      drawingFabInstanceVm.editingActionName = undefined\n      canShowDrawTip.value = defined(selectedDrawingActionInstance)\n      nextTick(() => {\n        emit(\n          'drawEvt',\n          Object.assign(\n            {\n              index,\n              pointIndex,\n              name: drawingType,\n              renderDatas,\n              finished: true,\n              windowPoistion: movement,\n              type: 'cancel'\n            },\n            computedRenderDatas.value[index]\n          ),\n          viewer\n        )\n      })\n      return\n    }\n\n    lastClickPosition = lastClickPosition || new Cesium.Cartesian2(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY)\n\n    if (Cartesian2.magnitude(Cartesian2.subtract(lastClickPosition, movement, {} as any)) < mouseDelta) {\n      return\n    }\n\n    if (options.button === 2 && drawStatus.value === DrawStatus.Drawing) {\n      if (tempPositions.length > 1) {\n        tempPositions.pop()\n        handleMouseMove(movement)\n      }\n    }\n\n    if (options.button !== 0) {\n      return\n    }\n\n    const scene = viewer.scene\n    const position = getWorldPosition(scene, movement, {} as any)\n    if (!defined(position)) {\n      return\n    }\n    let finished = false\n    let type = 'new'\n    if (cmpName === 'VcMeasurementHorizontal') {\n      if (editingPoint.value) {\n        drawStatus.value = DrawStatus.AfterDraw\n        editingPoint.value = undefined\n        finished = true\n        type = editorType.value\n        drawTip.value = drawTipOpts.value.drawingTipStart\n      } else if (tempPositions.length === 0) {\n        const ellipsoid = scene.frameState.mapProjection.ellipsoid as Cesium.Ellipsoid\n        tempPositions.push(position)\n        polyline.positions = tempPositions\n        polyline.heightPlane = Plane.fromPointNormal(position, ellipsoid.geodeticSurfaceNormal(position, {} as any), polyline.heightPlane)\n        const positionCartographic = ellipsoid.cartesianToCartographic(position, {} as any)\n        const positionProject = scene.mapProjection.project(positionCartographic, {} as any)\n        const positionCV = Cartesian3.fromElements(positionProject.z, positionProject.x, positionProject.y, positionProject)\n        polyline.heightPlaneCV = Plane.fromPointNormal(positionCV, Cartesian3.UNIT_X, polyline.heightPlaneCV)\n        polyline.height = positionCartographic.height\n        polyline.firstMove = true\n        polyline.drawStatus = DrawStatus.Drawing\n        polyline.show = true\n        drawStatus.value = DrawStatus.Drawing\n      } else {\n        tempPositions.push(polyline.tempNextPos!)\n        polyline.positions = tempPositions\n        polyline.firstMove = true\n      }\n      drawTip.value = drawTipOpts.value.drawingTipEnd\n    } else {\n      if (editingPoint.value) {\n        if (platform().hasTouch === true) {\n          const position = getWorldPosition(scene, movement, {} as any)\n          if (defined(position)) {\n            const positions = polyline.positions\n            positions.splice(editingPoint.value._index, 1, position)\n            editingPoint.value.pixelSize = props.pointOpts?.pixelSize * 1.0\n          }\n        }\n\n        drawStatus.value = DrawStatus.AfterDraw\n        editingPoint.value = undefined\n        finished = true\n        type = editorType.value\n        drawTip.value = drawTipOpts.value.drawingTipStart\n      } else {\n        tempPositions.push(position)\n\n        polyline.positions = tempPositions\n        polyline.show = true\n        polyline.drawStatus = DrawStatus.Drawing\n        drawStatus.value = DrawStatus.Drawing\n        canShowDrawTip.value = true\n        drawTip.value = drawTipOpts.value.drawingTipEnd\n      }\n\n      if (type !== 'new') {\n        drawingFabInstanceVm.editingActionName = undefined\n        canShowDrawTip.value = defined(selectedDrawingActionInstance)\n      }\n    }\n\n    Cartesian2.clone(movement, lastClickPosition)\n\n    nextTick(() => {\n      emit(\n        'drawEvt',\n        Object.assign(\n          {\n            index,\n            pointIndex,\n            name: drawingType,\n            renderDatas,\n            finished,\n            position: cmpName === 'VcMeasurementHorizontal' ? polyline.positions[polyline.positions.length - 1] : position,\n            windowPoistion: movement,\n            type: type\n          },\n          computedRenderDatas.value[index]\n        ),\n        viewer\n      )\n    })\n  }\n\n  const handleMouseMove = (movement: Cesium.Cartesian2, options?) => {\n    const { viewer, getWorldPosition } = $services\n    const scene = viewer.scene\n    const position = getWorldPosition(scene, movement, {} as any)\n    const { defined } = Cesium\n\n    if (!defined(position)) {\n      return\n    }\n\n    drawTipPosition.value = position\n\n    if (drawStatus.value !== DrawStatus.Drawing) {\n      return\n    }\n\n    const index = editingPoint.value ? editingPoint.value._vcPolylineIndex : renderDatas.value.length - 1\n    const polyline = renderDatas.value[index] as VcPolylineDrawing\n    const pointIndex = editingPoint.value ? editingPoint.value._index : polyline.positions.length - 1\n\n    let type = 'new'\n    if (cmpName === 'VcMeasurementHorizontal') {\n      const { SceneMode, IntersectionTests, Cartesian3 } = Cesium\n      const ellipsoid = scene.frameState.mapProjection.ellipsoid as Cesium.Ellipsoid\n      const positions = polyline.positions\n      const cameraRay = scene.camera.getPickRay(movement)\n      let intersectionPosition, unprojectPosition\n      if (scene.mode === SceneMode.SCENE3D && polyline.heightPlane) {\n        intersectionPosition = IntersectionTests.rayPlane(cameraRay, polyline.heightPlane)\n      } else if (scene.mode === SceneMode.COLUMBUS_VIEW && polyline.heightPlaneCV) {\n        intersectionPosition = IntersectionTests.rayPlane(cameraRay, polyline.heightPlaneCV)\n        intersectionPosition = Cartesian3.fromElements(intersectionPosition.y, intersectionPosition.z, intersectionPosition.x, intersectionPosition)\n        unprojectPosition = scene.mapProjection.unproject(intersectionPosition)\n        intersectionPosition = ellipsoid.cartographicToCartesian(unprojectPosition)\n      } else {\n        intersectionPosition = scene.camera.pickEllipsoid(movement, ellipsoid)\n        if (defined(intersectionPosition)) {\n          const cartographicPosition = ellipsoid.cartesianToCartographic(intersectionPosition)\n          cartographicPosition.height = polyline.height || 0\n          intersectionPosition = ellipsoid.cartographicToCartesian(cartographicPosition, intersectionPosition)\n        }\n      }\n\n      if (!defined(intersectionPosition)) {\n        return\n      }\n\n      if (!polyline.firstMove && options?.shift) {\n        const lastPosition = positions[positions.length - 2]\n        const tempNextPos = polyline.tempNextPos\n        const d1 = Cartesian3.subtract(tempNextPos!, lastPosition, {} as any)\n        let d2 = Cartesian3.subtract(intersectionPosition, lastPosition, {} as any)\n        d2 = Cartesian3.projectVector(d2, d1, d2)\n        intersectionPosition = Cartesian3.add(lastPosition, d2, intersectionPosition)\n      }\n\n      if (editingPoint.value) {\n        const positions = polyline.positions\n        positions.splice(editingPoint.value._index, 1, intersectionPosition)\n        type = editorType.value\n        // drawTip.value = drawTipOpts.value.drawingTipStart\n      } else {\n        const tempPositions = polyline.tempPositions.slice()\n        tempPositions.push(intersectionPosition)\n        polyline.positions = tempPositions\n        polyline.firstMove = false\n        polyline.tempNextPos = Object.assign(intersectionPosition)\n        drawTip.value = drawTipOpts.value.drawingTipEnd\n      }\n    } else {\n      if (editingPoint.value) {\n        const positions = polyline.positions\n        positions.splice(editingPoint.value._index, 1, position)\n        type = editorType.value\n      } else {\n        const tempPositions = polyline.tempPositions.slice()\n\n        tempPositions.push(position)\n        polyline.positions = tempPositions\n      }\n    }\n\n    nextTick(() => {\n      emit(\n        'drawEvt',\n        Object.assign(\n          {\n            index,\n            pointIndex,\n            name: drawingType,\n            renderDatas,\n            finished: false,\n            position: cmpName === 'VcMeasurementHorizontal' ? polyline.positions[polyline.positions.length - 1] : position,\n            windowPoistion: movement,\n            type\n          },\n          computedRenderDatas.value[index]\n        ),\n        viewer\n      )\n    })\n  }\n\n  const handleDoubleClick = movement => {\n    const { drawingFabInstance, selectedDrawingActionInstance, viewer } = $services\n    if (drawStatus.value === DrawStatus.Drawing) {\n      const index = editingPoint.value ? editingPoint.value._vcPolylineIndex : renderDatas.value.length - 1\n      const polyline = renderDatas.value[index] as VcPolylineDrawing\n      const pointIndex = editingPoint.value ? editingPoint.value._index : polyline.positions.length - 1\n      stop(false)\n      drawTip.value = drawTipOpts.value.drawingTipStart\n\n      nextTick(() => {\n        emit(\n          'drawEvt',\n          Object.assign(\n            {\n              index,\n              pointIndex,\n              name: drawingType,\n              renderDatas,\n              finished: true,\n              position: polyline.positions[polyline.positions.length - 1],\n              windowPoistion: movement,\n              type: 'new'\n            },\n            computedRenderDatas.value[index]\n          ),\n          viewer\n        )\n\n        if (props.mode === 1) {\n          const drawingFabInstanceVm = drawingFabInstance?.proxy as VcDrawingsRef | VcMeasurementsRef | VcAnalysesRef\n          drawingFabInstanceVm.toggleAction(selectedDrawingActionInstance)\n        }\n      })\n    }\n  }\n\n  const getPointIndexes = () => {\n    let polylineIndex = editingPoint.value._vcPolylineIndex\n    let pointIndex = editingPoint.value._index\n\n    if (cmpName === 'VcAnalysisSightline') {\n      for (let i = 0; i < renderDatas.value.length; i++) {\n        const polyline = renderDatas.value[i]\n        for (let j = 0; j < polyline.positions.length; j++) {\n          const position = polyline.positions[j]\n          if (editingPoint.value.position.equals(position)) {\n            polylineIndex = i\n            pointIndex = j\n          }\n        }\n      }\n    }\n\n    return [polylineIndex, pointIndex]\n  }\n\n  const onEditorClick = e => {\n    editorPosition.value = [0, 0, 0]\n    showEditor.value = false\n\n    if (!props.editable) {\n      return\n    }\n\n    const { viewer, drawingFabInstance } = $services\n    const drawingFabInstanceVm = drawingFabInstance?.proxy as VcDrawingsRef | VcMeasurementsRef | VcAnalysesRef\n    editorType.value = e\n    if (e === 'move') {\n      drawTip.value = drawTipOpts.value.drawingTipEditing\n      drawStatus.value = DrawStatus.Drawing\n      editingPoint.value = mouseoverPoint.value\n      canShowDrawTip.value = true\n      const indexes = getPointIndexes()\n      editingPoint.value._vcPolylineIndex = indexes[0]\n      editingPoint.value._index = indexes[1]\n      restorePosition = renderDatas.value[indexes[0]].positions[indexes[1]]\n      drawingFabInstanceVm.editingActionName = drawingType\n    } else if (e === 'insert') {\n      const index = mouseoverPoint.value._vcPolylineIndex\n      const polyline = renderDatas.value[index]\n      polyline.positions.splice(mouseoverPoint.value._index, 0, mouseoverPoint.value.position)\n      editingPoint.value = mouseoverPoint.value\n      canShowDrawTip.value = true\n      drawStatus.value = DrawStatus.Drawing\n      drawTip.value = drawTipOpts.value.drawingTipEditing\n      drawingFabInstanceVm.editingActionName = drawingType\n    } else if (e === 'remove') {\n      const index = mouseoverPoint.value._vcPolylineIndex\n      const polyline = renderDatas.value[index]\n      polyline.positions.length > 2 && polyline.positions.splice(mouseoverPoint.value._index, 1)\n    } else if (e === 'removeAll') {\n      const index = mouseoverPoint.value._vcPolylineIndex\n      renderDatas.value.splice(index, 1)\n    } else {\n      const index = mouseoverPoint.value._vcPolylineIndex\n      const polyline = renderDatas.value[index]\n      props.editorOpts?.[e]?.callback?.(index, polyline)\n    }\n\n    emit(\n      'editorEvt',\n      {\n        type: e,\n        renderDatas: renderDatas,\n        name: drawingType,\n        polylineIndex: mouseoverPoint.value._vcPolylineIndex,\n        pointIndex: mouseoverPoint.value._index,\n        point: mouseoverPoint.value\n      },\n      viewer\n    )\n  }\n\n  const clear = () => {\n    renderDatas.value = []\n    stop()\n  }\n\n  // expose public methods\n  const publicMethods = {\n    computedRenderDatas,\n    renderDatas,\n    startNew,\n    stop,\n    clear,\n    handleMouseClick,\n    handleMouseMove,\n    handleDoubleClick\n  }\n  Object.assign(instance.proxy, publicMethods)\n\n  return () => {\n    const { createGuid, Cartesian3 } = Cesium\n    const children: Array<VNode> = []\n\n    const points = []\n    computedRenderDatas.value.forEach((polyline, index) => {\n      const positions = polyline.positions.slice()\n      if (positions.length > 1) {\n        // polyline\n        polyline.loop && positions.push(positions[0])\n        const polylineOpts = Object.assign({}, props.polylineOpts, polyline.polylineOpts)\n        props.clampToGround && delete polylineOpts.arcType\n        const primitiveOpts = Object.assign({}, props.primitiveOpts, polyline.primitiveOpts)\n        children.push(\n          h(\n            props.clampToGround ? VcPrimitiveGroundPolyline : VcPrimitive,\n            {\n              show: (polyline.show && primitiveOpts.show) || props.editable || polyline.drawStatus === DrawStatus.Drawing,\n              ...primitiveOpts,\n              onReady: (readyObject: VcReadyObject) => {\n                primitiveOpts?.onReady?.(readyObject)\n                ;(readyObject.cesiumObject as any)._vcPolylineIndex = index // for editor\n              }\n            },\n            () =>\n              h(\n                VcGeometryInstance,\n                {\n                  id: createGuid()\n                },\n                () =>\n                  h(props.clampToGround ? VcGeometryGroundPolyline : VcGeometryPolyline, {\n                    positions: positions,\n                    ...polylineOpts\n                  })\n              )\n          )\n        )\n      }\n      // for VcMeasurementHorizontal\n      const dashLineOpts = Object.assign({}, props.dashLineOpts, polyline.dashLineOpts)\n      const dashLinePrimitiveOpts = Object.assign({}, props.dashLinePrimitiveOpts, polyline.dashLinePrimitiveOpts)\n      polyline.dashedLines?.forEach(dashedLine => {\n        children.push(\n          h(\n            VcPrimitive,\n            {\n              show: (polyline.show && props.dashLinePrimitiveOpts.show) || props.editable || polyline.drawStatus === DrawStatus.Drawing,\n              ...dashLinePrimitiveOpts\n            },\n            () =>\n              h(\n                VcGeometryInstance,\n                {\n                  id: createGuid()\n                },\n                () =>\n                  h(VcGeometryPolyline, {\n                    positions: dashedLine.positions,\n                    ...dashLineOpts\n                  })\n              )\n          )\n        )\n      })\n      // points\n      const polylinePointOpts = Object.assign({}, props.pointOpts, polyline.pointOpts)\n      children.push(\n        h(VcCollectionPoint, {\n          enableMouseEvent: props.enableMouseEvent,\n          show: polyline.show,\n          points: polyline.points.map((point, subIndex) => {\n            const position = point.position as Cesium.Cartesian3\n            let includes = false\n            for (let i = 0; i < points.length; i++) {\n              // 通视分析 的观察点会加载很多个 在这儿过滤下只显示一个\n              Cartesian3.equals(position, points[i]) && (includes = true)\n            }\n            const show =\n              (props.pointOpts?.show || props.editable || polyline.drawStatus === DrawStatus.Drawing) &&\n              (cmpName === 'VcAnalysisSightline' && polyline.positions.length === 3 ? subIndex !== 1 : true) &&\n              !includes\n\n            if (cmpName === 'VcAnalysisSightline') {\n              points.push(position)\n            }\n\n            const pointOpts = Object.assign({}, polylinePointOpts, point)\n            return {\n              position,\n              id: createGuid(),\n              _vcPolylineIndex: index, // for editor\n              show,\n              ...pointOpts\n            }\n          }),\n          onMouseover: onMouseoverPoints,\n          onMouseout: onMouseoutPoints,\n          onReady: onVcCollectionPointReady\n        })\n      )\n      // labels\n      children.push(\n        h(VcCollectionLabel, {\n          enableMouseEvent: props.enableMouseEvent,\n          show: polyline.show,\n          labels: polyline.labels,\n          onReady: onVcCollectionLabelReady\n        })\n      )\n      // polygon\n      if (positions.length > 2 && (cmpName.includes('Polygon') || cmpName.includes('Area'))) {\n        const polygonOpts = Object.assign({}, props.polygonOpts, polyline.polygonOpts)\n        children.push(\n          h(VcPolygon, {\n            positions: positions,\n            clampToGround: props.clampToGround,\n            show: polyline.show && props.polygonOpts?.show,\n            ...polygonOpts,\n            onReady: (readyObject: VcReadyObject) => {\n              onVcPrimitiveReady(readyObject)\n              polygonOpts?.onReady?.(readyObject)\n              ;(readyObject.cesiumObject as any)._vcPolylineIndex = index // for editor\n            }\n          })\n        )\n      }\n    })\n\n    if (props.drawtip?.show && canShowDrawTip.value) {\n      const { viewer } = $services\n      children.push(\n        h(\n          VcOverlayHtml,\n          {\n            position: drawTipPosition.value,\n            pixelOffset: props.drawtip.pixelOffset,\n            teleport: {\n              to: viewer.container\n            }\n          },\n          () =>\n            h(\n              'div',\n              {\n                class: 'vc-drawtip vc-tooltip--style'\n              },\n              drawTip.value\n            )\n        )\n      )\n    }\n\n    if (showEditor.value) {\n      const buttons: Array<VNode> = []\n      if (mouseoverPoint.value) {\n        const editorOpts = props.editorOpts\n        for (const key in editorOpts) {\n          if (!Array.isArray(editorOpts[key]) && typeof editorOpts[key] !== 'number') {\n            const opts = {\n              ...editorOpts[key]\n            }\n            delete opts.color\n\n            buttons.push(\n              h(\n                VcBtn,\n                {\n                  style: { color: editorOpts[key].color, background: editorOpts[key].background },\n                  ...opts,\n                  onclick: onEditorClick.bind('polyline', key)\n                },\n                () =>\n                  h(\n                    VcTooltip,\n                    {\n                      ...editorOpts[key].tooltip\n                    },\n                    () => h('strong', null, editorOpts[key].tooltip?.tip || t(`vc.drawing.editor.${key}`))\n                  )\n              )\n            )\n          }\n        }\n      }\n\n      const { viewer } = $services\n      children.push(\n        h(\n          VcOverlayHtml,\n          {\n            position: editorPosition.value,\n            pixelOffset: props.editorOpts?.pixelOffset,\n            teleport: {\n              to: viewer.container\n            },\n            onMouseenter: onMouseenterEditor,\n            onMouseleave: onMouseleaveEditor\n          },\n          () =>\n            h(\n              'div',\n              {\n                class: 'vc-editor'\n              },\n              buttons\n            )\n        )\n      )\n    }\n    return h(\n      VcCollectionPrimitive,\n      {\n        ref: primitiveCollectionRef,\n        show: props.show,\n        onReady: onPrimitiveCollectionReady\n      },\n      () => children\n    )\n  }\n}\n"],"names":["getCurrentInstance","useCommon","useLocale","useDrawingAction","ref","makeCartesian3Array","DrawStatus","computed","MeasureUnits","reactive","getFirstIntersection","distance","distances","getGeodesicDistance","calculateAreaByPostions","compareCesiumVersion","positionWindow","nextTick","platform","position","positions","_a","_b","h","VcPrimitiveGroundPolyline","VcPrimitive","VcGeometryInstance","VcGeometryGroundPolyline","VcGeometryPolyline","VcCollectionPoint","VcCollectionLabel","VcPolygon","VcOverlayHtml","VcBtn","VcTooltip","VcCollectionPrimitive"],"mappings":"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"}