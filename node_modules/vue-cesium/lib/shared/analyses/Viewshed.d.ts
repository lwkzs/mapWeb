import { VcViewshedOpts } from 'vue-cesium/es/utils/drawing-types';
import { DebugCameraPrimitive } from '../src';
declare class Viewshed {
    _scene: Cesium.Scene;
    _frustum: Cesium.PerspectiveFrustum;
    _spotLightCamera: Cesium.Camera;
    _viewshedShadowMap: Cesium.ShadowMap;
    _debugCameraPrimitive: DebugCameraPrimitive;
    _enabledChangedEvent: Cesium.Event;
    _position: Cesium.Cartesian3;
    _offsetHeight: number;
    _visibleColor: Cesium.Color;
    _invisibleColor: Cesium.Color;
    _showGridLine: boolean;
    _fovH: number;
    _fovV: number;
    constructor(scene: Cesium.Scene, options?: VcViewshedOpts);
    get frustum(): Cesium.PerspectiveFrustum;
    get fovH(): number;
    set fovH(e: number);
    get fovV(): number;
    set fovV(e: number);
    get near(): number;
    set near(e: number);
    get far(): any;
    set far(e: any);
    get position(): Cesium.Cartesian3;
    set position(e: Cesium.Cartesian3);
    get offsetHeight(): number;
    set offsetHeight(e: number);
    get heading(): number;
    set heading(e: number);
    get pitch(): number;
    set pitch(e: number);
    get roll(): number;
    set roll(e: number);
    get shadowMap(): Cesium.ShadowMap;
    get lightCamera(): Cesium.Camera;
    get enabled(): boolean;
    set enabled(e: boolean);
    get enabledChangedEvent(): Cesium.Event<(...args: any[]) => void>;
    get visibleColor(): Cesium.Color;
    set visibleColor(e: Cesium.Color);
    get invisibleColor(): Cesium.Color;
    set invisibleColor(e: Cesium.Color);
    get showGridLine(): boolean;
    set showGridLine(e: boolean);
    get faceColor(): Cesium.Color;
    set faceColor(e: Cesium.Color);
    get lineColor(): Cesium.Color;
    set lineColor(e: Cesium.Color);
    update(frameState: any): void;
    setView(options: any): void;
    isDestroyed(): boolean;
    destroy(): void;
}
export default Viewshed;
